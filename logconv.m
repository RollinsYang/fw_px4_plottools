% This Matlab Script can be used to import the binary logged values of the
% PX4FMU into data that can be plotted and analyzed.

%% ************************************************************************
% logconv: Main function
% ************************************************************************
function logconv()
% Clear everything
clc;
clear all;
close all;
path(path,'01_draw_functions');
path(path,'01_draw_functions/01_subfunctions');
path(path,'02_helper_functions');
path(path,'03_kmltoolbox_v2.6');
path(path,'04_log_files');
path(path,'05_csv_files');
path(path,'06_mat_files');
path(path,'07_kmz_files');

% ************************************************************************
% SETTINGS (modify necessary parameter)
% ************************************************************************

% set the path to your log file here file here
fileName = '13_35_39.ulg';

% the source from which the data is imported
% 0: converting the ulog to csv files and then parsing the csv files
%    (required for the first run)
% 1: only parsing the pre-existing csv files
%    (requires the generated csv files)
% 2: import the data from the .mat file
%    (requires the generated .mat file)
% else: Defaults to 0
loadingMode = 0;

% Print information while converting/loading the log file in mode 0 or 1.
% Helpfull to identify field missmatchs.
loadingVerbose = false;

% indicates if the sysvector map and the topics struct should be saved
% after they are generated.
saveMatlabData = true;

% delete the csv file after a run of the script
deleteCSVFiles = true;

% id of the vehicle (note displaying the logs multiple vehicles at the same
% time is not supported yet)
vehicleID = 0;

% delimiter for the path
%   '/' for ubuntu
%   '\' for windows
pathDelimiter = '/';

% indicates if the plots should be generated. If set to false the log file
% is only converted to the sysvector.
generatePlots = true;

% only plot the logged data from t_start to t_end. If both are set to 0.0
% all the logged data is plotted.
t_start = 0.0;
t_end = 0.0;

% change topic names or add new topics in the setupTopics function.

% ************************************************************************
% SETTINGS end
% ************************************************************************

% ******************
% Import the data
% ******************

% get the file name without the file ending
plainFileName = extractBefore(fileName,'.');

% conversion factors
fconv_timestamp=1E-6;    % [microseconds] to [seconds]
fconv_gpsalt=1E-3;       % [mm] to [m]
fconv_gpslatlong=1E-7;   % [gps_raw_position_unit] to [deg]

if loadingMode==2
    if exist([plainFileName '.mat'], 'file') == 2
        load([plainFileName '.mat']);
        if (numel(fieldnames(topics)) == 0) || (sysvector.Count == 0)
            error(['Sysvector and/or topics loaded from the .mat file are empty.' newline ...
                'Run script first with loadingMode=0 and saveMatlabData=true'])
        end
    else
        error(['Could not load the data as the file does not exist.' newline ...
            'Run script first with loadingMode=0 and saveMatlabData=true'])
    end
else
    % setup the topics which could have been logged
    topics = struct;
    setupTopics();
    
    % import the data
    sysvector = containers.Map();
    ImportPX4LogData();
end

% ******************
% Crop the data
% ******************
sysvector_keys = sysvector.keys';
CropPX4LogData();

% ******************
% Print the data
% ******************

if generatePlots
    DisplayPX4LogData(sysvector, topics, plainFileName, fconv_gpsalt, fconv_gpslatlong)
end


%% ************************************************************************
%  *** END OF MAIN SCRIPT ***
%  NESTED FUNCTION DEFINTIONS FROM HERE ON
%  ************************************************************************

%% ************************************************************************
%  setupTopics (nested function)
%  ************************************************************************
%  Specify the struct of topics. Each topic contains a topic name and
%  boolean which tells if that topic was logged (default value must be
%  false)
%  Only rearrange the field names if they changed in the message 
%  definition. If the names are changed all the plotting scripts need to be
%  adopted. The fields list does not include the timestamp which is the
%  first entry of the csv file.

function setupTopics()
    % Edit only the topic names of the existing topics or add a new one
    topics.actuator_controls = ...
        struct('topic_name', 'actuator_controls_0', 'logged', false,...
        'fields', ['timestamp_sample', 'control_0', 'control_1' , 'control_2',...
        'control_3', 'control_4', 'control_5', 'control_6', 'control_7']);
    topics.actuator_outputs = ...
        struct('topic_name', 'actuator_outputs', 'logged', false,...
        'fields', ['noutputs', 'output_0', 'output_1' , 'output_2',...
        'output_3', 'output_4', 'output_5', 'output_6', 'output_7',...
        'output_8', 'output_9', 'output_10', 'output_11', 'output_12',...
        'output_13', 'output_14', 'output_15']);
    topics.airspeed = ...
        struct('topic_name', 'airspeed', 'logged', false,...
        'fields', ['indicated_airspeed', 'true_airspeed', ...
        'true_airspeed_unfiltered' , 'air_temperature', 'confidence']);
    topics.battery_status = ...
        struct('topic_name', 'battery_status', 'logged', false,...
        'fields', ['v', 'v_filtered', 'i', 'i_filtered', 'discharged_mah',...
        'remaining' , 'scale', 'cell_count', 'connected', 'system_source', 'priority', 'warning']);
    topics.commander_state = ...
        struct('topic_name', 'commander_state', 'logged', false,...
        'fields', ['main_state']);
    topics.control_state = ...
        struct('topic_name', 'control_state', 'logged', false,...
        'fields', ['x_acc', 'y_acc', 'z_acc' , 'x_vel', 'y_vel', 'z_vel',...
        'x_pos', 'y_pos', 'z_pos', 'airspeed', 'vel_var_0', 'vel_var_1',...
        'vel_var_2', 'pos_var_0', 'pos_var_1', 'pos_var_2', 'q0', 'q1',...
        'q2', 'q3', 'delta_q_reset_0', 'delta_q_reset_1', 'delta_q_reset_2',...
        'delta_q_reset_3', 'roll_rate', 'pitch_rate', 'yaw_rate',...
        'horz_acc_mag', 'roll_rate_bias', 'pitch_rate_bias', 'yaw_rate_bias',...
        'airspeed_valid', 'quat_reset_counter']);
    topics.cpuload = ...
        struct('topic_name', 'cpuload', 'logged', false,...
        'fields', ['load', 'ram_usage']);
    topics.differential_pressure = ...
        struct('topic_name', 'differential_pressure', 'logged', false,...
        'fields', ['error_count', 'differential_pressure_raw',...
        'differential_pressure_filtered', 'temperature', 'device_id']);
    topics.ekf2_innovations = ...
        struct('topic_name', 'ekf2_innovations', 'logged', false,...
        'fields', ['vel_pos_0', 'vel_pos_1', 'vel_pos_2' , 'vel_pos_3',...
        'vel_pos_4', 'vel_pos_5', 'mag_0', 'mag_1', 'mag_2', 'heading',...
        'airspeed', 'beta', 'flow_0', 'flow_1', 'hagl', 'vel_pos_0_var',...
        'vel_pos_1_var', 'vel_pos_2_var', 'vel_pos_3_var', 'vel_pos_4_var',...
        'vel_pos_5_var', 'mag_0_var', 'mag_1_var', 'mag_2_var', 'heading_var',...
        'airspeed_var', 'beta_var', 'flow_0_var', 'flow_1_var', 'hagl_var',...
        'output_tracking_error_0', 'output_tracking_error_1', 'output_tracking_error_2',...
        'drag_0', 'drag_1', 'drag_0_var', 'drag_1_var']);
    topics.ekf2_timestamps = ...
        struct('topic_name', 'ekf2_timestamps', 'logged', false,...
        'fields', ['gps_timestamp_rel', 'optical_flow_timestamp_rel',...
        'distance_sensor_timestamp_rel', 'airspeed_timestamp_rel', ...
        'vision_position_timestamp_rel', 'vision_attitude_timestamp_rel']);
    topics.estimator_status = ...
        struct('topic_name', 'estimator_status', 'logged', false,...
        'fields', ['states_0', 'states_1', 'states_2' , 'states_3',...
        'states_4', 'states_5', 'states_6', 'states_7', 'states_8', 'states_9',...
        'states_10', 'states_11', 'states_12', 'states_13', 'states_14', 'states_15',...
        'states_16', 'states_17', 'states_18', 'states_19', 'states_20',...
        'states_21', 'states_22', 'states_23', 'n_states', 'vibe_0',...
        'vibe_1', 'vibe_2', 'covar_0', 'covar_1', 'covar_2', 'covar_3',...
        'covar_4', 'covar_5', 'covar_6', 'covar_7', 'covar_8', 'covar_9',...
        'covar_10', 'covar_11', 'covar_12', 'covar_13', 'covar_14', 'covar_15',...
        'covar_16', 'covar_17', 'covar_18', 'covar_19', 'covar_20', 'covar_21',...
        'covar_22', 'covar_23', 'control_mode_flags', 'pos_horiz_accuracy',...
        'pos_vert_accuracy', 'mag_test_ratio', 'vel_test_ratio', 'pos_test_ratio',...
        'hgt_test_ratio', 'tas_test_ratio', 'hagl_test_ratio', 'time_slip',...
        'gps_check_fail_flags', 'filter_fault_flags', 'innovation_check_flags',...
        'solution_status_flags', 'nan_flags', 'health_flags', 'timeout_flags']);
    topics.position_setpoint_triplet = ...
        struct('topic_name', 'position_setpoint_triplet', 'logged', false,...
        'fields', ['prev_timestamp', 'prev_lat', 'prev_lon' , 'prev_x',...
        'prev_y', 'prev_z', 'prev_vx', 'prev_vy', 'prev_vz', 'prev_alt',...
        'prev_yaw', 'prev_yawspeed', 'prev_loiter_radius', 'prev_pitch_min',...
        'prev_a_x', 'prev_a_y', 'prev_a_z', 'prev_acceptance_radius', 'prev_cruising_speed',...
        'prev_cruising_throttle', 'prev_valid', 'prev_type', 'prev_position_valid',...
        'prev_velocity_valid', 'prev_velocity_frame', 'prev_alt_valid', 'prev_yaw_valid',...
        'prev_disable_mc_yaw_control', 'prev_yawspeed_valid', 'prev_loiter_direction',...
        'prev_acceleration_valid', 'prev_acceleration_is_force',...
        'curr_timestamp', 'curr_lat', 'curr_lon' , 'curr_x',...
        'curr_y', 'curr_z', 'curr_vx', 'curr_vy', 'curr_vz', 'curr_alt',...
        'curr_yaw', 'curr_yawspeed', 'curr_loiter_radius', 'curr_pitch_min',...
        'curr_a_x', 'curr_a_y', 'curr_a_z', 'curr_acceptance_radius', 'curr_cruising_speed',...
        'curr_cruising_throttle', 'curr_valid', 'curr_type', 'curr_position_valid',...
        'curr_velocity_valid', 'curr_velocity_frame', 'curr_alt_valid', 'curr_yaw_valid',...
        'curr_disable_mc_yaw_control', 'curr_yawspeed_valid', 'curr_loiter_direction',...
        'curr_acceleration_valid', 'curr_acceleration_is_force',...
        'next_timestamp', 'next_lat', 'next_lon' , 'next_x',...
        'next_y', 'next_z', 'next_vx', 'next_vy', 'next_vz', 'next_alt',...
        'next_yaw', 'next_yawspeed', 'next_loiter_radius', 'next_pitch_min',...
        'next_a_x', 'next_a_y', 'next_a_z', 'next_acceptance_radius', 'next_cruising_speed',...
        'next_cruising_throttle', 'next_valid', 'next_type', 'next_position_valid',...
        'next_velocity_valid', 'next_velocity_frame', 'next_alt_valid', 'next_yaw_valid',...
        'next_disable_mc_yaw_control', 'next_yawspeed_valid', 'next_loiter_direction',...
        'next_acceleration_valid', 'next_acceleration_is_force']);
    topics.input_rc = ...
        struct('topic_name', 'input_rc', 'logged', false,...
        'fields', ['timestamp_last_signal', 'channel_count', 'rssi',...
        'rc_lost_frame_count', 'rc_total_frame_count', 'rc_ppm_frame_length',...
        'val_0', 'val_1', 'val_2', 'val_3', 'val_4', 'val_5', 'val_6',...
        'val_7', 'val_8', 'val_9', 'val_10', 'val_11', 'val_12', 'val_13',...
        'val_14', 'val_15', 'val_16', 'val_17', 'rc_failsafe', 'rc_lost',...
        'input_source']);
    topics.sensor_combined = ...
        struct('topic_name', 'sensor_combined', 'logged', false,...
        'fields', ['gyro_0', 'gyro_1', 'gyro_2' , 'gyro_integral_dt',...
        'acc_timestamp_relative', 'acc_0', 'acc_1', 'acc_2', 'acc_integral_dt',...
        'mag_timestamp_relative', 'mag_0', 'mag_1', 'mag_2',...
        'baro_timestamp_relative', 'baro_alt', 'baro_temp']);
    topics.sensor_preflight = ...
        struct('topic_name', 'sensor_preflight', 'logged', false,...
        'fields', ['acc_inconsistency', 'gyro_inconsistency', 'mag_inconsystency']);
    topics.sensor_baro = ...
        struct('topic_name', 'sensor_baro', 'logged', false,...
        'fields', ['error_count','pressure', 'altitude', 'temperature',...
        'device_id']);
    topics.system_power = ...
        struct('topic_name', 'system_power', 'logged', false,...
        'fields', ['voltage5V', 'voltage3.3V', 'v3.3V_valid', 'usb_connected',...
        'brick_valid', 'usb_valid', 'servo_valid', 'periph_5V_OC', 'hipower_5V_OC']);
    topics.task_stack_info = ...
        struct('topic_name', 'task_stack_info', 'logged', false,...
        'fields', ['stack_free', 'task_0', 'task_1' , 'task_2',...
        'task_3', 'task_4', 'task_5', 'task_6', 'task_7', 'task_8',...
        'task_9', 'task_10', 'task_11', 'task_12',...
        'task_13', 'task_14', 'task_15']);
    topics.tecs_status = ...
        struct('topic_name', 'tecs_status', 'logged', false,...
        'fields', ['altitudeSp', 'altitude_filtered', 'flightPathAngleSp',...
        'flightPathAngle', 'airspeedSp', 'airspeed_filtered',...
        'airspeedDerivativeSp', 'airspeedDerivative', 'totalEnergyError',...
        'energyDistributionError', 'totalEnergyRateError', 'energyDistributionRateError',...
        'throttle_integ', 'pitch_integ', 'mode']);
    topics.telemetry_status = ...
        struct('topic_name', 'telemetry_status', 'logged', false,...
        'fields', ['heartbeat_time', 'telem_time', 'rxerrors', 'fixed',...
        'type', 'rssi', 'remote_rssi', 'noise', 'remote_noise', 'txbuf',...
        'system_id', 'component_id']);
    topics.vehicle_attitude = ...
        struct('topic_name', 'vehicle_attitude', 'logged', false,...
        'fields', ['rollspeed', 'pitchspeed', 'yawspeed', 'q_0',...
        'q_1', 'q_2', 'q_3', 'delta_q_reset_0', 'delta_q_reset_1'...
        'delta_q_reset_2', 'delta_q_reset_3', 'quat_reset_counter']);
    topics.vehicle_attitude_setpoint = ...
        struct('topic_name', 'vehicle_attitude_setpoint', 'logged', false,...
        'fields', ['roll_body', 'pitch_body', 'yaw_body', 'yaw_sp_move_rate',...
        'q_d_0', 'q_d_1', 'q_d_2', 'q_d_3', 'thrust', 'landing_gear',...
        'q_d_valid', 'roll_reset_integral', 'pitch_reset_integral',...
        'yaw_reset_integral', 'fw_control_yaw', 'disable_mc_yaw_control',...
        'apply_flaps']);
    topics.vehicle_command = ...
        struct('topic_name', 'vehicle_command', 'logged', false,...
        'fields', ['param5', 'param6', 'param1', 'param2', 'param3',...
        'param4', 'param7', 'command', 'target_system', 'target_component',...
        'source_system', 'source_component', 'confirmation', 'from_external']);
    topics.vehicle_global_position = ...
        struct('topic_name', 'vehicle_global_position', 'logged', false,...
        'fields', ['lat', 'lon', 'alt', 'delta_alt', 'vel_n', 'vel_e',...
        'vel_d', 'pos_d_deriv', 'yaw', 'eph', 'epv', 'evh', 'evv',...
        'terrain_alt', 'pressure_alt', 'lat_lon_reset_counter', 'alt_reset_counter', ...
        'terrain_alt_valid', 'dead_reckoning']);
    topics.vehicle_gps_position = ...
        struct('topic_name', 'vehicle_gps_position', 'logged', false,...
        'fields', ['time_utc', 'lat', 'lon', 'alt', 'alt_ellipsoid'...
        's_variance', 'c_variance', 'eph', 'epv', 'hdop', 'vdop',...
        'noise_per_ms', 'jamming_indicator', 'vel', 'vel_n', 'vel_e', 'vel_d',...
        'cog', 'timestamp_time_relative', 'fix_type',...
        'vel_ned_valid', 'satellites_used']);
    topics.vehicle_land_detection = ...
        struct('topic_name', 'vehicle_land_detection', 'logged', false,...
        'fields', ['alt_max', 'landed', 'freefall', 'ground_contact']);
    topics.vehicle_local_position = ...
        struct('topic_name', 'vehicle_local_position', 'logged', false,...
        'fields', ['ref_timestamp', 'ref_lat', 'ref_lon', ...
        'x', 'y', 'z', 'delta_xy_0',...
        'delta_xy_1', 'delta_z', 'vx', 'vy', 'vz', 'z_deriv', 'delta_vxy0',...
        'delta_vxy_1', 'delta_vz', 'ax', 'ay', 'az', 'yaw', 'ref_alt',...
        'dist_bottom', 'dist_bottom_rate', 'eph', 'epv', 'evh', 'evv',...
        'xy_valid', 'z_valid', 'v_xy_valid', 'v_z_valid',...
        'xy_reset_counter', 'z_reset_counter', 'vxy_reset_counter', 'vz_reset_counter',...
        'xy_global', 'z_global', 'dist_bottom_valid']);
    topics.vehicle_rates_setpoint = ...
        struct('topic_name', 'vehicle_rates_setpoint', 'logged', false,...
        'fields', ['roll', 'pitch', 'yaw', 'thrust']);
    topics.vehicle_status = ...
        struct('topic_name', 'vehicle_status', 'logged', false,...
        'fields', ['sys_id', 'component_id', 'onboard_control_sensors_present',...
        'onboard_control_sensors_enabled', 'onboard_control_sensors_health',...
        'nav_state', 'arming_state', 'hil_state', 'failsafe', 'sys_type',...
        'is_rw', 'is_vtol', 'vtol_fw_permanent_stab', 'in_transition_mode', 'in_transition_to_fw'...
        'rc_signal_lost', 'rc_input_mode', 'data_link_lost', ...
        'data_link_lost_counter', 'engine_failure', 'engine_failure_cmd', ...
        'mission_failure']);
    topics.wind_estimate = ...
        struct('topic_name', 'wind_estimate', 'logged', false,...
        'fields', ['north', 'east', 'var_north', 'var_east']);
end


%% ************************************************************************
%  ImportPX4LogData (nested function)
%  ************************************************************************
%  Import the data from the log file.

function ImportPX4LogData()
    disp('INFO: Start importing the log data.')
    
    if exist(fileName, 'file') ~= 2
        error('Log file does not exist.')
    end

    % *********************************
    % convert the log file to csv files
    % *********************************
    if (loadingMode~=1) && (loadingMode~=2)
    end
    
    % *********************************
    % unpack the csv files
    % *********************************
    topic_fields = fieldnames(topics);
    
    if numel(topic_fields) == 0
        error('No topics specified in the setupTopics() function.') 
    end
    
    force_debug = false;
    for idx_topics = 1:numel(topic_fields)
        csv_file = ...
            [plainFileName '_' topics.(topic_fields{idx_topics}).topic_name...
            '_' num2str(vehicleID) '.csv'];
        if exist(csv_file, 'file') == 2
            try
                csv_data = tdfread(csv_file, ',');
                csv_fields = fieldnames(csv_data);
                
                if ((numel(fieldnames(csv_data))-1) ~= numel(topics.(topic_fields{idx_topics}).fields))
                    disp(['The number of data fields in the csv file is not equal to' ...
                        ' the ones specified in the topics struct for '...
                        topic_fields{idx_topics} '. Check that the mapping is correct']);
                    force_debug = true;
                end

                for idx = 2:numel(csv_fields)
                    ts = timeseries(csv_data.(csv_fields{idx}), ...
                        csv_data.timestamp*fconv_timestamp, ...
                        'Name', [topic_fields{idx_topics} '.' char(topics.(topic_fields{idx_topics}).fields(idx-1))]);
                    ts.DataInfo.Interpolation = tsdata.interpolation('zoh');
                    sysvector([topic_fields{idx_topics} '.' char(topics.(topic_fields{idx_topics}).fields(idx-1))]) = ts;

                    if loadingVerbose || force_debug
                        str = sprintf('%s \t\t\t %s',...
                            topics.(topic_fields{idx_topics}).fields(idx-1),...
                            string(csv_fields{idx}));
                        disp(str)
                    end
                end

                topics.(topic_fields{idx_topics}).logged = true;
            catch
                disp(['Could not process the topic: ' char(topic_fields{idx_topics})]);
            end
        end
        force_debug = false;
    end
    
    % manually add a value for the commander state with the timestamp of
    % the latest global position estimate as they are used together
    if topics.commander_state.logged && topics.vehicle_global_position.logged
       ts_temp = append(sysvector('commander_state.main_state'),...
           timeseries(sysvector('commander_state.main_state').Data(end),...
           sysvector('vehicle_global_position.lon').Time(end)));
       ts_temp.DataInfo.Interpolation = tsdata.interpolation('zoh');
       ts_temp.Name = 'commander_state.main_state';
       sysvector('commander_state.main_state') = ts_temp;
    end

    % check that we have a nonempy sysvector
    if (loadingMode~=1) && (loadingMode~=2)
        if sysvector.Count == 0
            error(['Empty sysvector: Converted the ulog file to csv and parsed it.' newline ...
                'Contains the logfile any topic specified in the setupTopics() function?'])
        end
    else
        if sysvector.Count == 0
            error(['Empty sysvector: Tried to read directly from the csv files.' newline ...
                'Does any csv file for a topic specified the setupTopics() function exist?'])
        end
    end
    
    % *********************************
    % remove duplicate timestamps
    % *********************************
    sysvec_keys = sysvector.keys;
    for idx_key = 1:numel(sysvec_keys)
        % copy data info
        data_info = sysvector(sysvec_keys{idx_key}).DataInfo;
                
        % remove duplicate timestamps
        [~,idx_unique,~] = unique(sysvector(sysvec_keys{idx_key}).Time,'legacy');
        ts_temp = getsamples(sysvector(sysvec_keys{idx_key}), idx_unique);

        ts_temp.DataInfo = data_info;
        sysvector(sysvec_keys{idx_key}) = ts_temp;
    end
   
    % *********************************
    % save the sysvector and topics struct if requested
    % *********************************
    if saveMatlabData
        save(['06_mat_files' pathDelimiter plainFileName '.mat'], 'sysvector', 'topics');
    end
    
    % *********************************
    % delete the csv files if requested
    % *********************************
    if deleteCSVFiles
        system(sprintf('rm 05_csv_files''%s''%s''_*', pathDelimiter, plainFileName));
    end
    
    disp('INFO: Finished importing the log data.')
end


%% ************************************************************************
%  CropPX4LogData (nested function)
%  ************************************************************************
%  Import the data from the log file.

function CropPX4LogData()
    if (t_start == 0.0 && t_end == 0.0)
        disp('INFO: Not cropping the logging data.')
        return;
    end
    if (t_start > t_end)
        disp('INFO: t_start > t_end: not cropping the logging data.')
        return;
    end
    
    disp('INFO: Start cropping the log data.')
    
    for idx_key = 1:numel(sysvector_keys)
        % copy data info
        data_info = sysvector(sysvector_keys{idx_key}).DataInfo;
        
        % crop time series
        ts_temp = getsampleusingtime(sysvector(sysvector_keys{idx_key}), t_start, t_end);
        ts_temp.DataInfo = data_info;
        sysvector(sysvector_keys{idx_key}) = ts_temp;
    end
    
    disp('INFO: Finshed cropping the log data.')
end

end
